import os
from glob import glob
import argparse
import calcos
import costools
from astropy.io import fits

def _get_corrtag_files(directory='./'):
	# FUNCTION: Search given directory for any FITS file containing 'corrtag' in the file name
	# INPUT: directory--directory to search for FITS files
	# OUTPUT: list of FITS files found in directory
	infiles = glob(pathname='*corrtag*.fits',root_dir=directory)
	print('Found files')
	print(infiles)
	print('\n\n')
	return infiles

def _make_dir(outdir):
	# FUNCTION: Attempt to make a new directory './outdir'. Does nothing if directory already exists.
	# INPUT: outdir--name of directory to make
	# OUTPUT: None
	try:
		if(os.path.isdir(outdir)):
			print('Directory exists')
			return
		else:
			os.mkdir(outdir)
			print('Made direcotry: %s'%(outdir))
			return
	except Exception as err:
		print('Could not make output directory. Unexpected %s, %s'%(err,type(err)))
		raise

def _get_calcos_files(datadir):
	# FUNCTION: Retrieve the segment a files generated from splittag
	# INPUT: datadir--location of files generated by splittag
	# OUTPUT: list of corrtag_a files found in datadir
	print('Retrieving splittag files for CalCOS.')
	calcos_files = glob(pathname=os.path.join(datadir,'*corrtag_a.fits'))
	print('Found files.',end='\n\n')
	print(calcos_files)
	print('Note: CalCOS requires ONLY corrtag a files. Including corrtag b files will result in errors.')
	return calcos_files

def delete_intermediate_files(calcos=False,calcos_dir=None,splittag=False,splittag_dir=None):
	# FUNCTION: Delete all of the intermediate files generated by splittag and calcos
	# INPUT:
	#    calcos--flag to delete calcos files
	#    calcos_dir--directory containing calcos files
	#    splittag--flag to delete splittag files 
	#    splittag_dir--directory containing splittag files
	# OUTPUT: None
	if((calcos_dir is None) and (splittag_dir is None)):
		raise TypeError('calcos_dir and splittag_dir cannot both be None')
	if((calcos is False) and (splittag is False)):
		raise TypeError('calcos and splittag cannot both be False')
	if(calcos):
		print('Removing CalCOS files')
		for root,dirs,files in os.walk(calcos_dir):
			for file in files:
				if(not('x1d' in file)):
					tempfile = os.path.join(root,file)
					os.remove(tempfile)
					print('Removed: %s'%(tempfile))
	print('\n\n')
	if(splittag):
		print('Removing splittag files')
		for root,dirs,files in os.walk(splittag_dir):
			if(root==splittag_dir):
				for file in files:
					try:
						tempfile = os.path.join(root,file)
						os.remove(tempfile)
						print('Removed: %s'%(tempfile))
					except Exception as err:
						print('Unexpected %s, %s'%(err,type(err)))
						print('Could not remove file. Continuing with next file.')
						continue
	print('\n\n')
	return

def run_calcos(datadir,outdir=None,dqicorr=False,delete_temp_files=True):
	# FUNCTION: Run CalCOS calcos to create x1d files
	# INPUT: 
	#    datadir--location of files generated by splittag (passed to _get_cal_files datadir)
	#    outdir--output directory for x1d files
	#    dqicorr--flag to perform DQICORR during calcos. Flagging true will increase runtime dramatically
	# OUTPUT: None
	files = _get_calcos_files(datadir)
	if(outdir is None):
		print('No output directory supplied. Making a new one')
		outdir = os.path.join(datadir,'x1d')
		_make_dir(outdir)
	for file in files:
		try:
			a_file = file
			b_file = file.replace('_a.fits','_b.fits')
			print('File: %s'%(file))
			if(not(dqicorr)):
				print('Turning off DQICORR')
				fits.setval(a_file,'DQICORR',value='OMIT',ext=0)
				fits.setval(b_file,'DQICORR',value='OMIT',ext=0)
			print('Running calcos')
			calcos.calcos(file,outdir=outdir)
		except Exception as err:
			print(err)
			continue
	if(delete_temp_files):
		delete_intermediate_files(calcos=True,calcos_dir=outdir)
	return

def run_splittag(infiles=None,outdir=None,increment=None,starttime=None,endtime=None):
	# FUNCTION: Run COStools splittag on a list of files
	# INPUT: 
	#    infiles--list of files to run splittag on
	#    outdir--directory to store output of splittag
	#    increment--time binsize for splittag files
	#    starttime--time to start splitting
	#    endtime--time to end splitting
	# OUTPUT: None
	if(increment is None):
		print('No increment set. Setting increment to 500 seconds.')
		increment = 500
	if(outdir is None):
		print('No output directory supplied. Attempting to create one.')
		outdir = './splittag/bin_%s'%(increment)
		_make_dir(outdir)
	if(infiles is None):
		print('Retrieving corrtag files')
		infiles = _get_corrtag_files(directory='./')

	print('Running COStools splittag')
	for file in infiles:
		rootname = file.split(sep='_')[0][-9::]
		try:
			costools.splittag.splittag(file,outroot=os.path.join(outdir,rootname),increment=increment,starttime=starttime,endtime=endtime)
		except Exception as err:
			print('Unexpected %s, %s'%(err,type(err)))
			print('Continuing with next file.')
			continue
	return